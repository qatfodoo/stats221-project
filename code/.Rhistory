source("MLE.R")
## Local try of MLE
# 2 level per cat
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(obs)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0)
print(gom.est) # Print param estimates
save(file='./out/bicat_gom_est.RData', gom.est)
# Analyze results
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(obs)] # Remove sdr_id col
obs <- feat[2:length(feat)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0)
print(gom.est) # Print param estimates
# Compute estimates
t1.sim <- as.numeric(Sys.time())
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2)
t2.sim <- as.numeric(Sys.time())
dt.sim <- (t2.sim - t1.sim) / 60 # dt in min
print(paste(paste("MLE elapsed time (min), task", task.id, sep=" "), dt.sim, sep=": "))
head(sir.fit)
r.sq <- data.frame(sdr.id=sir.fit$sdr_id, rsq=sir.fit$r_squared)
head(r.sq)
t1.sim <- as.numeric(Sys.time())
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2)
t2.sim <- as.numeric(Sys.time())
dt.sim <- (t2.sim - t1.sim) / 60 # dt in min
print(paste(paste("MLE elapsed time (min)", dt.sim, sep=": "))
print(paste("MLE elapsed time (min)", dt.sim, sep=": "))
print(paste("MLE elapsed time (min)", dt.sim, sep=": "))
d <- r.sq$r.sq
d
d <- r.sq$r.rsq
d
d <- r.sq$rsq
d
d <- d[!is.na(d)]
d
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
G.hat
gom.est$G.hat
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
colnames(G.hat) <- c("sdr.id", "g.low", "g.high")
class <- data.frame(sdr.id=G.hat$sdr.id, high=(G.hat$g.high >= 0.5))
class
class <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
class
?order
class[, order(sdr.id)]
class[, order(class$sdr.id)]
class[order(class$sdr.id), ]
sir.fit <- read.csv(file="../dat/SIR_fit.csv")
r.sq <- data.frame(sdr.id=sir.fit$sdr_id, rsq=sir.fit$r_squared)
r.sq <- r.sq[order(r.sq$sdr.id), ]
class
if (r.sq$sdr.id != class$sdr.id) { # Check id considered are the same
stop("SDR ids should match with SIR fit results.")
}
r.sq
class$sdr.id
(r.sq$sdr.id != class$sdr.id)
r.sq$sdr.id
class <- class[order(class$sdr.id), ] # Make sure order is right
head(class)
class$sdr.id
(r.sq$sdr.id != class$sdr.id)
class$sdr.id
r.sq$sdr.id != class$sdr.id
length(r.sq$sdr.id)
length(class$sdr.id)
r.sq$sdr.id
class$sdr.id
cl <- class[which(class$sdr.id %in% r.sq$sdr.id), ]
cl
# Obtain relevant classification in right order
cl <- class[which(class$sdr.id %in% r.sq$sdr.id), ]
if (r.sq$sdr.id != cl$sdr.id) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
rsq.low <- r.sq$rsq[cl$high == 0]
rsq.high <- r.sq$rsq[cl$high == 1]
# Remove NA fit values
rsq.low <- rsq.low[!id.na(rsq.low)]
rsq.high <- rsq.high[!id.na(rsq.high)]
cl <- class[which(class$sdr.id %in% r.sq$sdr.id), ]
r.sq$sdr.id != cl$sdr.id
all(r.sq$sdr.id != cl$sdr.id)
if all(r.sq$sdr.id == cl$sdr.id) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
if !(all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
if (!all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
if (all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
# Obtain relevant classification in right order
cl <- class[which(class$sdr.id %in% r.sq$sdr.id), ]
if (!all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
rsq.low <- r.sq$rsq[cl$high == 0]
rsq.high <- r.sq$rsq[cl$high == 1]
# Remove NA fit values
rsq.low <- rsq.low[!is.na(rsq.low)]
rsq.high <- rsq.high[!is.na(rsq.high)]
rssq.low
# Obtain relevant classification in right order
cl <- class[which(class$sdr.id %in% r.sq$sdr.id), ]
if (!all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
rsq.low <- r.sq$rsq[cl$high == 0]
rsq.high <- r.sq$rsq[cl$high == 1]
# Remove NA fit values
rsq.low <- rsq.low[!is.na(rsq.low)]
rsq.high <- rsq.high[!is.na(rsq.high)]
rsq.low
rsq.hihg
rsq.high
mean(rsq.low)
mean(rsq.high)
low.centr <- mean(rsq.low)
high.centr <- mean(rsq.high)
inter <- abs(high.centr - low.centr)
sir.fit <- read.csv(file="../dat/SIR_fit.csv")
r.sq <- data.frame(sdr.id=sir.fit$sdr_id, rsq=sir.fit$r_squared)
r.sq <- r.sq[order(r.sq$sdr.id), ]
# Evaluate a clustering results given SIR fits
EvalClass <- function(clust) {
# Obtain relevant classification in right order
cl <- clust[which(clust$sdr.id %in% r.sq$sdr.id), ]
if (!all(r.sq$sdr.id == cl$sdr.id)) { # Check id considered are the same (ordering)
stop("SDR ids should match with SIR fit results.")
}
rsq.low <- r.sq$rsq[cl$high == 0]
rsq.high <- r.sq$rsq[cl$high == 1]
# Remove NA fit values
rsq.low <- rsq.low[!is.na(rsq.low)]
rsq.high <- rsq.high[!is.na(rsq.high)]
# Cluster centroids
low.centr <- mean(rsq.low)
high.centr <- mean(rsq.high)
# Inter-centroidal separation
inter <- abs(high.centr - low.centr)
# Intra-cluster variance
var.low <- var(rsq.low - low.centr)
var.high <- var(rsq.high - high.centr)
intra <- (var.low + var.high) / 2 # Mean intra variance
res <- list(cl.met=(inter / intra), low.centr=low.centr, high.centr=high.centr,
var.low=var.low, var.high=var.high)
}
source("SIR_fit.R")
source("SIR_fit.R")
clust.res <- EvalClust(clust)
clust <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
clust <- clust[order(clust$sdr.id), ] # Make sure order is right
clust.res <- EvalClust(clust)
clust.res
library(GenSa)
library(GenSA)
?GenSA
library(GenSA)
library(GA)
install.packages("GA")
library(GA)
?ga
source("dat_format.R")
source("MLE.R")
source("SIR_fit.R")
## Local try of MLE
length(feature.names)
n.feat=19
max.lev=5
seq0 <- rep(0, max.lev + 1)
seq0[3] <- 1 # 2 levels
res <- rep(n.feat, seq0)
res <- rep(seq0, n.feat)
res
n.feat <- 19
max.lev <- 5
res
chrom<- res
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * max.lev):(1 + n * max.lev)]
})
seqs
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * max.lev):(1 + n * max.lev)]
}, simplify=F)
seqs
n.feat <- 19
max.lev <- 5
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1):(1 + n * (max.lev + 1))]
}, simplify=F)
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(1 + n * (max.lev + 1))]
}, simplify=F)
seqs
chrom
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(n * (max.lev + 1))]
}, simplify=F)
seqs
seqs
lapply(seqs, function(x) {sum(x)})
unlist(lapply(seqs, function(x) {sum(x)}))
sums == 1
unlist(lapply(seqs, function(x) {sum(x)})) == 1
sums <- unlist(lapply(seqs, function(x) {sum(x)}))
sums
seqs
a <- c(0,2 ,3)
match(1, )
match(a, 3)
match(a, 2)
match(2, a)
match(3, a)
lev <- lapply(seqs, function(x) {return(match(1, x) - 1)})
lev
lev <- unlist(lapply(seqs, function(x) {return(match(1, x) - 1)}))
lev
lev[1] <- 0
lev
fn <- features.names[lev != 0]
source("dat_format.R")
source("MLE.R")
source("SIR_fit.R")
fn <- features.names[lev != 0]
fn <- feature.names[lev != 0]
fn
feature.names
lev.feat <- lev[lev != 0]
lev.feat
length(lev)
length(feature.names)
lev <- lev[1:(length(lev) - 1)]
fn <- feature.names[lev != 0]
lev.feat <- lev[lev != 0]
# Fitness of a chromosome
Fitness <- function(chrom) {
## Format sequence for each feature
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(n * (max.lev + 1))]
}, simplify=F)
sums <- unlist(lapply(seqs, function(x) {sum(x)}))
if (!all(sums == 1)) {
return(-100) # Unvalid format of chromosome
}
## Get chromosome encoded levels
lev <- unlist(lapply(seqs, function(x) {return(match(1, x) - 1)}))
cat.age <- lev[length(lev)]
age <- cat.age != 0
lev <- lev[1:(length(lev) - 1)]
fn <- feature.names[lev != 0]
lev.feat <- lev[lev != 0]
## Compute categorical data and fit MLE
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(feat)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2)
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
colnames(G.hat) <- c("sdr.id", "g.low", "g.high")
clust <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
clust <- clust[order(clust$sdr.id), ] # Make sure order is right
clust.res <- EvalClust(clust) # Metrics from clustering
return(clust.res)
}
chrom <- InitialChrom
chrom <- InitialChrom()
# Compute initial chrom of certain length with max level
InitialChrom <- function(n.feat=19, max.lev=5) {
if (max.lev < 2) {
stop("Need at least max level of 2.")
}
seq0 <- rep(0, max.lev + 1)
seq0[3] <- 1 # 2 levels
res <- rep(seq0, n.feat)
}
chrom <- InitialChrom()
chrom
Fitness(chrom)
InitalChrom
InitalChrom()
chrom
as.matrix(chrom)
matrix(chrom, ncol=length(chrom))
n.feat * (max.lev + 1)
## Try GA
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150, suggestions=matrix(chrom, ncol=length(chrom)))
## Format sequence for each feature
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(n * (max.lev + 1))]
}, simplify=F)
sums <- unlist(lapply(seqs, function(x) {sum(x)}))
if (!all(sums == 1)) {
return(-100) # Unvalid format of chromosome
}
## Get chromosome encoded levels
lev <- unlist(lapply(seqs, function(x) {return(match(1, x) - 1)}))
cat.age <- lev[length(lev)]
age <- cat.age != 0
lev <- lev[1:(length(lev) - 1)]
fn <- feature.names[lev != 0]
lev.feat <- lev[lev != 0]
## Compute categorical data and fit MLE
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(feat)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2)
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
colnames(G.hat) <- c("sdr.id", "g.low", "g.high")
clust <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
clust <- clust[order(clust$sdr.id), ] # Make sure order is right
clust.res <- EvalClust(clust) # Metrics from clustering
clust.res$cl.met
as.numeric(clust.res$cl.met)
as.numeric(clust.res$cl.met)
type(clust.res$cl.met)
typeof(clust.res$cl.met)
typeof(as.numeric(clust.res$cl.met))
# Fitness of a chromosome
Fitness <- function(chrom) {
## Format sequence for each feature
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(n * (max.lev + 1))]
}, simplify=F)
sums <- unlist(lapply(seqs, function(x) {sum(x)}))
if (!all(sums == 1)) {
return(-100) # Unvalid format of chromosome
}
## Get chromosome encoded levels
lev <- unlist(lapply(seqs, function(x) {return(match(1, x) - 1)}))
cat.age <- lev[length(lev)]
age <- cat.age != 0
lev <- lev[1:(length(lev) - 1)]
fn <- feature.names[lev != 0]
lev.feat <- lev[lev != 0]
## Compute categorical data and fit MLE
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(feat)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2)
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
colnames(G.hat) <- c("sdr.id", "g.low", "g.high")
clust <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
clust <- clust[order(clust$sdr.id), ] # Make sure order is right
clust.res <- EvalClust(clust) # Metrics from clustering
return(as.numeric(clust.res$cl.met))
}
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150, suggestions=matrix(InitialChrom(), ncol=length(chrom)))
library(GA)
source("dat_format.R")
source("MLE.R")
source("SIR_fit.R")
# Try Genetic Algorithm to optimize feature selection
n.feat <- 19
max.lev <- 5
# Fitness of a chromosome
Fitness <- function(chrom) {
## Format sequence for each feature
seqs <- sapply(1:n.feat, function(n) {
chrom[(1 + (n - 1) * (max.lev + 1)):(n * (max.lev + 1))]
}, simplify=F)
sums <- unlist(lapply(seqs, function(x) {sum(x)}))
if (!all(sums == 1)) {
return(-100) # Unvalid format of chromosome
}
## Get chromosome encoded levels
lev <- unlist(lapply(seqs, function(x) {return(match(1, x) - 1)}))
cat.age <- lev[length(lev)]
age <- cat.age != 0
lev <- lev[1:(length(lev) - 1)]
fn <- feature.names[lev != 0]
lev.feat <- lev[lev != 0]
## Compute categorical data and fit MLE
feat <- ComputeCatDf(feature.names, rep(2, length(feature.names)), age=T, cat.age=2)
obs <- feat[2:length(feat)] # Remove sdr_id col
# theta0 uniform
theta0 <- PriorTheta(c(rep(2, length(feature.names)), 4))
# G0 uniform
G0 <- matrix(data=0.5, nrow=dim(obs)[1], 2)
# Compute estimates
gom.est <- gomMLE(obs, G0, theta0, epsilon=1e-2, verbose=F)
G.hat <- data.frame(sdr.id=feat$sdr.id, g.hat=gom.est$G.hat)
colnames(G.hat) <- c("sdr.id", "g.low", "g.high")
clust <- data.frame(sdr.id=G.hat$sdr.id, high=as.numeric(G.hat$g.high >= 0.5))
clust <- clust[order(clust$sdr.id), ] # Make sure order is right
clust.res <- EvalClust(clust) # Metrics from clustering
return(as.numeric(clust.res$cl.met))
}
# Compute initial chrom of certain length with max level
InitialChrom <- function(n.feat=19, max.lev=5) {
if (max.lev < 2) {
stop("Need at least max level of 2.")
}
seq0 <- rep(0, max.lev + 1)
seq0[3] <- 1 # 2 levels
res <- rep(seq0, n.feat)
}
## Try GA
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150, suggestions=matrix(InitialChrom(), ncol=length(chrom)))
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150)
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=1500)
?sample
sample(1:5, 1)
sample(1:5, 1)
sample(1:5, 1)
# Compute random suggestions
InitialChrom <- function(num=100, n.feat=19, max.lev=5) {
if (max.lev < 2) {
stop("Need at least max level of 2.")
}
sugg <- matrix(0, ncol=n.feat * (max.lev + 1), nrow=num)
for (i in 1:num) {
row <- c()
for (j in 1:n.feat) {
seq0 <- rep(0, max.le(v + 1)
lev <- sample(1:(max.lev + 1), 1)
seq0[lev] <- 1
row <- c(row, seq0)
}
sugg[i, ] <- row
}
}
# Compute random suggestions
InitialChrom <- function(num=100, n.feat=19, max.lev=5) {
if (max.lev < 2) {
stop("Need at least max level of 2.")
}
sugg <- matrix(0, ncol=n.feat * (max.lev + 1), nrow=num)
for (i in 1:num) {
row <- c()
for (j in 1:n.feat) {
seq0 <- rep(0, (max.lev + 1))
lev <- sample(1:(max.lev + 1), 1)
seq0[lev] <- 1
row <- c(row, seq0)
}
sugg[i, ] <- row
}
}
# Compute random suggestions
Suggestions <- function(num=100, n.feat=19, max.lev=5) {
if (max.lev < 2) {
stop("Need at least max level of 2.")
}
sugg <- matrix(0, ncol=n.feat * (max.lev + 1), nrow=num)
for (i in 1:num) {
row <- c()
for (j in 1:n.feat) {
seq0 <- rep(0, (max.lev + 1))
lev <- sample(1:(max.lev + 1), 1)
seq0[lev] <- 1
row <- c(row, seq0)
}
sugg[i, ] <- row
}
return(sugg)
}
Suggestions
Suggestions()
sugg <- Suggestions
sugg <- Suggestions()
sugg[1, ]
Fitness(sugg[1, ])
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=1500, suggestions=Suggestions(100))
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=1500, suggestions=Suggestions())
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150)
sugg
dim(sugg)
?ga
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150, suggestions=Suggestions(1))
## Try GA
gen.alg <- ga(type=c("binary"), fitness=Fitness, nBits=n.feat * (max.lev + 1),
maxiter=150, suggestions=Suggestions(10))
